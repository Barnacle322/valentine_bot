import datetime
import logging
import os

from sqlalchemy.orm import sessionmaker
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram.helpers import escape_markdown

from db_sqlalchemy import User, Valentine, engine

Session = sessionmaker(bind=engine)
session = Session()


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


VALENTINE, RECIPIENT, ANONIMITY, CONFIRMATION = range(4)

VALENTINE_COOLDOWN = 20

# –ì—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_GROUP = os.environ.get("ADMIN_GROUP")
# –ö–∞–Ω–∞–ª –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏
CHANNEL_ID = os.environ.get("CHANNEL_ID")


def db_add_valentine(
    sender: User,
    recipient: str,
    text: str,
    date: datetime,
    admin_message_id: int,
) -> None:
    valentine = Valentine(
        sender=sender.id,
        recipient=recipient,
        text=str(text),
        date=date,
        admin_message_id=admin_message_id,
    )

    session.add(valentine)
    session.commit()


def db_create_user(user_id: int, full_name: str, user_name: str, phone: str) -> None:
    user = User(
        user_id=int(user_id),
        full_name=str(full_name),
        user_name=str(user_name),
        phone=str(phone),
    )

    session.add(user)
    session.commit()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É. –ö—É–ª–¥–∞—É–Ω –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ VALENTINE_COOLDOWN
def can_post(user_id: int) -> bool:
    try:
        user = session.query(User).filter(User.user_id == user_id).first()

        last_valentine = (
            session.query(Valentine)
            .filter(Valentine.sender == user.id)
            .order_by(Valentine.id.desc())
            .first()
        )
    except Exception as e:
        logger.warning(e)
        session.rollback()
        return False
    finally:
        session.close()

    now_utc = datetime.datetime.now(datetime.timezone.utc)

    if last_valentine is None:
        return True

    if now_utc.replace(tzinfo=None) - last_valentine.date > datetime.timedelta(
        minutes=VALENTINE_COOLDOWN
    ):
        return True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç\! –Ø –±–æ—Ç\, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—Éüíå\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –º–æ–∂–Ω–æ [—Ç—É—Ç](https://google.com)üì´\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help\, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µü§ñ",
        reply_markup=reply_keyboard,
        parse_mode=ParseMode.MARKDOWN_V2,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/valentine - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É \n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –í–∞–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–µ –±–æ–π—Ç–µ—Å—å, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –í–∞—Å –ø–æ–ø—Ä–æ—Å—è—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç.\n\n–î–ò–°–ö–õ–ï–ô–ú–ï–†:\n–ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—Å: –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, —é–∑–µ—Ä–Ω–µ–π–º, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞—Ö(—Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–∞—Ç–µ–ª—å). –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –í–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º.",
        reply_markup=ReplyKeyboardRemove(),
    )


async def ticket_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = (
            session.query(User)
            .filter(User.user_id == update.message.from_user.id)
            .first()
        )
    except Exception as e:
        session.rollback()
        logger.warning(e)
    finally:
        session.close()

    if not user:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /valentine",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        return

    if user.blocked:
        await update.message.reply_text(
            "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    if not can_post(update.message.from_user.id):
        await update.message.reply_text(
            "–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—Éüíå\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    await update.message.reply_text(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –í–∞—à–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üíå\n\n–û—Ç–º–µ–Ω–∞ - /cancel",
        reply_markup=ReplyKeyboardRemove(),
    )
    return VALENTINE


async def valentine(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return ConversationHandler.END

    if update.message.text == "/cancel":
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if update.message.text == "/valentine" or update.message.text == "/valentine ":
        await update.message.reply_text(
            text="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –í–∞—à–µ–π –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏üíå \n\n–û—Ç–º–µ–Ω–∞ - /cancel",
            reply_markup=ReplyKeyboardRemove(),
        )
        return VALENTINE

    if len(update.message.text) > 500:
        await update.message.reply_text(
            "–í–∞—à–µ –ø–æ—Å–ª–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ 500 —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=ReplyKeyboardRemove(),
        )
        return VALENTINE
    else:
        context.user_data[VALENTINE] = update.message
        try:
            await update.message.reply_text(
                text="–ö—Ç–æ –ø–æ–ª—É—á–∏—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É? \n\nPS: –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è\n–ü—Ä–∏–º–µ—Ä: @Barnacle –ê—Ä—Å—Ç–∞–Ω",
                reply_markup=ReplyKeyboardRemove(),
            )
        except Exception as e:
            logger.warning(e)
            await update.message.reply_text(
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @Barnacle",
                reply_markup=ReplyKeyboardRemove(),
            )
        return RECIPIENT


async def recipient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return ConversationHandler.END

    if update.message.text == "/cancel":
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if update.message.text == "/valentine" or update.message.text == "/valentine ":
        await update.message.reply_text(
            text="–ö—Ç–æ –ø–æ–ª—É—á–∏—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É? \n\nPS: –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è\n–ü—Ä–∏–º–µ—Ä: @Barnacle –ê—Ä—Å—Ç–∞–Ω",
            reply_markup=ReplyKeyboardRemove(),
        )
        return RECIPIENT

    reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]

    if len(update.message.text) > 64:
        await update.message.reply_text(
            "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –∞–¥—Ä–µ—Å–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä–æ—á–µ",
            reply_markup=ReplyKeyboardRemove(),
        )
        return RECIPIENT

    context.user_data[RECIPIENT] = update.message

    await update.message.reply_text(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ? \n\n",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder="–ê–Ω–æ–Ω–∏–º–Ω–æ?",
        ),
    )

    return ANONIMITY


async def anonimity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return ConversationHandler.END

    if update.message.text == "/cancel":
        await update.message.reply_text("–û—Ç–º–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    context.user_data[ANONIMITY] = update.message.text
    reply_keyboard = [["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]]
    if update.message.text.lower() == "–¥–∞":
        msg = await update.message.reply_text(
            "–û–∫–µ–π, –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç –í–∞—à–µ –∏–º—è. \n\n–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: \n\n",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True,
                input_field_placeholder="–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            ),
        )
        await msg.reply_text(
            text=f"*–û—Ç:* –ê–Ω–æ–Ω–∏–º–∞ \n*–ö–æ–º—É:* {escape_markdown(context.user_data[RECIPIENT].text, version=2)} \n\n{escape_markdown(context.user_data[VALENTINE].text, version=2)}",
            parse_mode=ParseMode.MARKDOWN_V2,
        )

    elif update.message.text.lower() == "–Ω–µ—Ç":
        msg = await update.message.reply_text(
            "–û–∫–µ–π, –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç –í–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. \n\n–û–Ω–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: \n\n",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True,
                input_field_placeholder="–û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            ),
        )
        first_name = update.message.from_user.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        user_name = update.message.from_user.username or "–ù–µ—Ç –Ω–∏–∫–∞"

        await msg.reply_text(
            text=f"*–û—Ç:* {escape_markdown(first_name, version=2)} \| @{escape_markdown(user_name, version=2)}\n*–ö–æ–º—É:* {escape_markdown(context.user_data[RECIPIENT].text, version=2)} \n\n{escape_markdown(context.user_data[VALENTINE].text, version=2)}",
            parse_mode=ParseMode.MARKDOWN_V2,
        )

    return CONFIRMATION


async def confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return ConversationHandler.END

    if update.message.text.lower() == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
        first_name = update.message.from_user.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        user_name = update.message.from_user.username or "–ù–µ—Ç –Ω–∏–∫–∞"
        sender = (
            "–ê–Ω–æ–Ω–∏–º–∞"
            if context.user_data[ANONIMITY] == "–î–∞"
            else f"{first_name} | @{user_name}"
        )

        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=f"*–û—Ç:* {escape_markdown(sender, version=2)}\n*–ö–æ–º—É:* {escape_markdown(context.user_data[RECIPIENT].text, version=2)} \n\n{escape_markdown(context.user_data[VALENTINE].text, version=2)}\n\n@bilimkana\_cupidbot",
            parse_mode=ParseMode.MARKDOWN_V2,
        )

        admin_message_id = await bot.send_message(
            chat_id=ADMIN_GROUP,
            text=f"–û—Ç: {sender} \n–ö–æ–º—É: {context.user_data[RECIPIENT].text} \n\n{context.user_data[VALENTINE].text}",
        )

        await update.message.reply_text(
            "–í–∞—à–∞ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\!üì´ –ù–∞–π—Ç–∏ –µ–µ –º–æ–∂–Ω–æ [—Ç—É—Ç](https://t.me/bk_valentines)üíå",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN_V2,
        )

        try:
            user = (
                session.query(User)
                .filter(User.user_id == update.message.from_user.id)
                .first()
            )
            if user:
                db_add_valentine(
                    sender=user,
                    recipient=context.user_data[RECIPIENT].text,
                    text=context.user_data[VALENTINE].text,
                    date=datetime.datetime.now(datetime.timezone.utc),
                    admin_message_id=admin_message_id.message_id,
                )
        except Exception as e:
            session.rollback()
            logger.warning(e)
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Barnacle",
                reply_markup=ReplyKeyboardRemove(),
            )
        finally:
            session.close()

    elif update.message.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardRemove(),
        )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user = (
            session.query(User)
            .filter(User.user_id == update.message.from_user.id)
            .first()
        )
        if user:
            await update.message.reply_text(
                "–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /valentine",
                reply_markup=ReplyKeyboardRemove(),
            )
            return
    except Exception as e:
        session.rollback()
        logger.warning(e)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Barnacle",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        session.close()

    try:
        contact = update.message.contact
        full_name = (
            f"{contact.first_name} {contact.last_name}"
            if contact.last_name
            else contact.first_name
        )
    except Exception as e:
        logger.warning(e)

    try:
        db_create_user(
            user_id=contact.user_id,
            full_name=full_name,
            user_name=update.message.from_user.username,
            phone=contact.phone_number,
        )
    except Exception as e:
        logger.warning(e)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [
                        KeyboardButton(
                            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                            request_contact=True,
                        )
                    ]
                ],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        return

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
        reply_markup=ReplyKeyboardRemove(),
    )


async def block(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if str(update.message.chat_id) != str(ADMIN_GROUP):
        return

    if update.message.reply_to_message:
        message_id = update.message.reply_to_message.message_id

        try:
            user = (
                session.query(User)
                .join(Valentine)
                .filter(Valentine.admin_message_id == message_id)
                .first()
            )
        except Exception as e:
            session.rollback()
            logger.warning(e)
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
            return
        finally:
            session.close()

        try:
            reason = update.effective_message.text.split(maxsplit=1)[-1]
            if reason == "/block" or reason == "" or reason == " ":
                reason = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            user = session.query(User).filter(User.user_id == user.user_id).first()
            user.blocked = True
            user.blocked_reason = reason
            session.commit()

            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
            return

        except Exception as e:
            session.rollback()
            logger.warning(e)
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        finally:
            session.close()


async def who(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if str(update.message.chat_id) != str(ADMIN_GROUP):
        return

    if update.message.reply_to_message:
        message_id = update.message.reply_to_message.message_id

        try:
            user = (
                session.query(User)
                .join(Valentine)
                .filter(Valentine.admin_message_id == message_id)
                .first()
            )
        except Exception as e:
            session.rollback()
            logger.warning(e)
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
            return
        finally:
            session.close()

        try:
            await update.message.reply_text(
                f"Username: {'@' + str(user.user_name) if user.user_name != 'None' else '–ù–µ—Ç –Ω–∏–∫–∞'}\n–ò–º—è: {user.full_name or '–ù–µ—Ç –∏–º–µ–Ω–∏'}\n–ù–æ–º–µ—Ä: https://t.me/+{user.phone}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {user.blocked or '–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n–ü—Ä–∏—á–∏–Ω–∞: {user.blocked_reason or '–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"
            )
            return

        except Exception as e:
            session.rollback()
            logger.warning(e)
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        finally:
            session.close()


def main() -> None:
    assert (bot_token := os.environ.get("TOKEN"))

    application = ApplicationBuilder().token(bot_token).build()
    global bot
    bot = application.bot
    application.add_handler(CommandHandler("start", start, filters.ChatType.PRIVATE))
    application.add_handler(
        CommandHandler("help", help_command, filters.ChatType.PRIVATE)
    )
    application.add_handler(CommandHandler("block", block, filters.ChatType.GROUPS))
    application.add_handler(CommandHandler("who", who, filters.ChatType.GROUPS))

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("valentine", ticket_handler, filters.ChatType.PRIVATE)
        ],
        states={
            VALENTINE: [MessageHandler(filters.TEXT, valentine)],
            RECIPIENT: [MessageHandler(filters.TEXT, recipient)],
            ANONIMITY: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), anonimity)],
            CONFIRMATION: [
                MessageHandler(filters.Regex("^(–û—Ç–ø—Ä–∞–≤–∏—Ç—å|–û—Ç–º–µ–Ω–∏—Ç—å)$"), confirmation)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    if ADMIN_GROUP is None:
        print("ADMIN_GROUP is not set!")
        exit(1)
    if CHANNEL_ID is None:
        print("CHANNEL_ID is not set!")
        exit(1)
    main()
